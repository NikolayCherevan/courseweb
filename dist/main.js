(()=>{"use strict";const e=document.querySelector(".cards-wrapper"),t=document.querySelector(".it-cards");class r{constructor(){}addBtnEventListeners(){return new Promise(((e,r)=>{t.addEventListener("click",(()=>e(1)))}))}choseCardsScope(e){return new Promise(((t,r)=>{switch(e){case 1:t("/src/mock.json")}}))}async renderMockElements(e){try{let t=await fetch(e);return(await t.json()).cards}catch(e){console.log(e)}}renderCardsList(t){t.forEach(((t,r)=>{e.innerHTML+=`<div><div class="uk-card uk-card-default uk-card-body">\n\t\t\t\t<h3 class="uk-card-title"> ${t.name}</h3>\n\t\t\t\t</div></div>`}))}addFlipListeners(){let e=0;document.querySelectorAll(".uk-card").forEach((t=>{t.addEventListener("click",(t=>{e<1?(e++,t.currentTarget.classList.toggle("flipped")):t.currentTarget.classList.contains("flipped")||alert("Ты уже выбрал предсказание, на сегодня достаточно")}))}))}}document.addEventListener("DOMContentLoaded",(function(){const e=new r;e.addBtnEventListeners().then((t=>e.choseCardsScope(t))).then((t=>e.renderMockElements(t))).then((t=>e.renderCardsList(t))).then((()=>e.addFlipListeners()))}))})();